#include<iostream>
#include<fstream>
#include <NTL/ZZ.h>
#include <NTL/vec_ZZ.h>
#include <NTL/mat_ZZ.h>
#include <NTL/LLL.h>
NTL_CLIENT
//背包问题->svp格上最短向量问题->LLL算法进行格基规约后，取其最短向量

int main() {
    //创建变量
    ZZ a[201], b[200], c[200], x1[50000], x2[50000], sum;
    sum = to_ZZ("25524880481602687821449527273020864745271768217764267356808323540903938724725");
    char x[10];
    ifstream fin("input200.txt");
    for (int i = 0; i < 10; i++) {
        fin >> x[0];
        fin >> x[0];
        fin >> x[0];
        fin >> a[i];
    }
    for (int i = 10; i < 100; i++) {
        fin >> x[0];
        fin >> x[0];
        fin >> x[0];
        fin >> x[0];
        fin >> a[i];
    }
    for (int i = 100; i < 200; i++) {
        fin >> x[0];
        fin >> x[0];
        fin >> x[0];
        fin >> x[0];
        fin >> x[0];
        fin >> a[i];
    }
    fin.close();

    //读取数组到矩阵B[]中
    mat_ZZ B;
    cout << B << endl;
    B.SetDims(201, 201);
    cout << B << endl;
    for (int i = 0; i < 200; i++) {
        B[i][i] = 1;
        B[i][200] = 0 - 1000000 * a[i];
    }
    B[200][200] = 1000000 * sum;

    //将这个矩阵进行LLL规约

    cout << B << endl;
    BKZ_FP(B,0.99,22);
    cout << B << "\n";
    /*
    B[80][80] = 0;
    for (int i = 0; i < 60; i++) {
        B[80][80] += a[i];
    }
    B[80][80] - sum;

    cout << B << endl;
    LLL_QP(B);
    cout << B << "\n";*/
    //验证
    ZZ n;
    for (int i = 0; i < 200; i++) {
        n = 0;
        for (int j = 0; j < 200; j++) {
            n = n + B[i][j] * a[j];
        }
        n = n - sum;
        cout << i << ' ' << n << endl;
        if (n == 0) {
            cout << B[i] << "\n";
        }
    }
    cout << B[0] << "\n";
    n = 0;
    ZZ nn;
    nn = 0;
    for (int i = 0; i < 200; i++) {
        n = n + B[199][i] * a[i];
        cout << i << " " << n << endl;
        nn = nn + B[199][i] * B[199][i];
    }
    cout << B[199] << endl;
    cout << nn << endl;

    return 0;
}


//[-2 -2 -2 5 0 -3 -2 5 1 3 -1 0 4 0 1 3 1 2 2 3 2 5 4 0 -1 4 -2 -4 -1 -3 -7 1 3 0 0 5 -1 1 -3 2 -2 -5 1 -1 4 1 7 2 -1 -1 3 1 -1 -1 -1 -6 -6 0 0 5 0 -1 2 -6 6 1 -1 5 1 0 -2 -4 2 -4 1 -1 -4 2 -1 1 1 6 0 -4 0 2 0 1 5 3 0 1 -2 0 0 -3 0 1 4 0 0 0 -1 3 0 0 0 0 0 4 0 0 0 0 0 1 0 0 0 0 3 -3 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0]
//[-2 -2 -2 5 0 -3 -2 5 1 3 -1 0 4 0 1 3 1 2 2 3 2 5 4 0 -1 4 -2 -4 -1 -3 -7 1 3 0 0 5 -1 1 -3 2 -2 -5 1 -1 4 1 7 2 -1 -1 3 1 -1 -1 -1 -6 -6 0 0 5 0 -1 2 -6 6 1 -1 5 1 0 -2 -4 2 -4 1 -1 -4 2 -1 1 1 6 0 -4 0 2 0 1 5 3 0 1 -2 0 0 -3 0 1 4 0 0 0 -1 3 0 0 0 0 0 4 0 0 0 0 0 1 0 0 0 0 3 -3 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0]
//[-2 -2 -2 5 0 -3 -2 5 1 3 -1 0 4 0 1 3 1 2 2 3 2 5 4 0 -1 4 -2 -4 -1 -3 -7 1 3 0 0 5 -1 1 -3 2 -2 -5 1 -1 4 1 7 2 -1 -1 3 1 -1 -1 -1 -6 -6 0 0 5 0 -1 2 -6 6 1 -1 5 1 0 -2 -4 2 -4 1 -1 -4 2 -1 1 1 6 0 -4 0 2 0 1 5 3 0 1 -2 0 0 -3 0 1 4 0 0 0 -1 3 0 0 0 0 0 4 0 0 0 0 0 1 0 0 0 0 3 -3 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0]
//[-3 -2 -1 -1 0 2 0 3 0 0 -1 -3 -2 1 1 3 6 1 2 0 -2 7 4 -2 2 1 3 0 3 2 -1 -4 2 1 1 -3 2 -2 2 2 3 2 -5 0 4 2 2 -3 1 0 -1 4 2 0 -2 2 2 -3 -2 1 -3 -2 1 0 1 2 -1 3 -3 0 0 1 0 -5 8 -4 0 -1 0 -1 -3 -3 1 6 2 0 1 1 -2 -1 1 4 3 -4 1 -3 -1 2 0 0 -3 0 1 0 0 0 0 0 0 -6 0 0 0 0 0 -2 0 0 0 0 -3 4 2 0 0 4 0 0 0 1 0 0 0 0 -1 0 -1 0 0 5 0 0 0 0 0 3 2 1 3 0 0 0 0 -2 0 0 0 4 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -4 0 0 0 0 0 0 0 0 0 0 0]


